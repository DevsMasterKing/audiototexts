 What's going on everybody? It's your boy Kilo Loco and today we're going to be working with Flutter. So today's February 1st, it marks the very first day of hashtag 30 Days of Flutter. I wanted to participate and I wanted to help you participate. So I'm going to be putting out a couple of videos here and there just so that we have a couple of projects to work with in Flutter. So today we're actually going to be building out your very first Flutter application where it's actually going to be useful and you're going to be able to essentially hit a button and it's going to randomly select a restaurant for you to eat at because I don't know about you but sometimes I can't decide what I want to eat. So having something that makes that decision for me would be pretty useful. So with all that said, let's go ahead and jump right on in. Now we're going to start off and I'm going to be using Visual Studio Code. So I just wanted to point that out. You can use any IDE that you're comfortable with and you text editor that you're comfortable with. I'm going to be using VS Code. Now I also have these two extensions installed Dart and Flutter. It's just going to help me with syntax highlighting and then it's going to just make it format automatically for me. So just keep that in mind if yours is a little bit different. But let's go ahead and start off by creating a new project. All right. So I'll just call mine day one restaurant picker and it's going to start creating that project and it's going to run a couple of scripts that are going to build the iOS side and the Android side and everything's going to be created for us. Once everything is finished building, you'll actually see that it does give you an initial application right here that's just going to be a number counter. If you want to play with it, go ahead and press the run button or the play button and you're going to be able to see the initial application that the Flutter devs have given to us that allow you to just watch how the number can go up as you press the button. So I'm going to actually go ahead and delete all of this except for the main function. All right. So we deleted everything except for the main function and now we're obviously going to get this error because this object no longer exists. This my app object. So let's go ahead and create my app. So we created our class called my app and it extends something called stateful widget. Now in Flutter, everything is a widget. Everything that you see, everything that you could work with is just going to be a widget and that's going to essentially be the building blocks of our UI. So we're going to actually be working with a stateful widget, which means that it's going to be able to remember any user input and values that may change and that's going to allow us to actually interact with the app. We're not going to simply be displaying data. We're going to be actually interacting with things. Now, stateful widget is an abstract class and what that means is that it's going to say, hey, you need to do x, y, and z in order for you to actually extend me or be part of me. So that means that we need to implement the create state function in order to properly conform or extend a stateful widget. And as you can see, we're just simply throwing an error right here because we just used autocomplete and this is what it's going to give us just so that all the errors go away. But if we were to run this our app of crash. Now, what we want to do is we want to run this create state function in the background. The stateful widget is going to want to call this create state in the background for us. And what it is expecting to receive is a state object with a generic type of stateful widget. So what we're going to do is we're going to create an instance of this type, a state that implements a stateful widget. And we're actually going to make that stateful widget our my app. All right, so we created a new class called underscore my app state. The underscore just means that we can only use this class inside of this file. So just keep that in mind. It extends state and that state is going to take in my app. So as you can see, we're essentially returning the same type of object that it's expecting for the create state. So now what we can do is we can remove this throwing error and return an instance of my app state. There we go. So this will actually return an instance of my app state whenever it's going to run the create state function. Now we need to implement the build method, which is part of conforming or extending a state object. Now, what we want to do here is remove this and replace it with a material app, which is a widget. And that's exactly what this build method is expecting to return. Now the material app is going to make our app look like an app. It's going to add some style links to like text and things like that. And it's also going to help with the material design, right? Now material app also takes in a parameter called home and it's expecting a widget. The widget that we're going to pass in right here is scaffold. This is going to further extend the styling of our app. Continue to make it look really nice for us. If we were to move forward without using material app or scaffold, it may not build or we're going to have like a really, really ugly app is just these widgets do not look right without either of these things. So let's go ahead and add in the scaffold. Once we have the material app and the scaffold, now we can actually start working with the widgets that we want to build our UI with. So the first thing that we want to do is we want to get something on the screen just to display some text. And let's go ahead and and put some text on the screen of somewhere that we would like to eat. All right, so we're passing in the argument for body as text with the word McDonald's. Now I actually spelled McDonald's wrong because if I were to add the apostrophe with the s, you'll notice that everything kind of gets weird and we get this weird formatting issue. That's because we're creating a string with the single quotes and then when we end the single quote right there, the computer thinks that we're ending it right there, but we actually want to have the apostrophe in the string. In order to get around that, we're going to prefix it with a backslash and that's going to allow us to show McDonald's. Once that's all done, we're going to save the file and we're going to run the app. All right, and there's our app. As you can see, it looks terrible and where's McDonald's? Well, it's all the way up here at the top left. And the reason for that is because everything starts off at the top left when you're working in flutter and all we did was add in a text right here. Now what would be better than that would to actually have the word McDonald's down here in the center. So what we're going to do is we're going to take this text widget and wrap it in a center widget. We can easily do this by right clicking on it, going down to Refactor and then selecting Wrap with Center. So let's go ahead and save that. And the cool thing about flutter is that if you just go ahead and save the file and you have it set up for hot reloads to update after you save the file, we can actually see that without running the app again, it was already updated and displayed our change in the app. So it's really cool. It's really, it really helps when you're trying to move fast in development. So that's really nice. Let's go ahead and shrink this down just so that we can see our updates happen live. Now, as you can see, we just have this kind of plain McDonald's just floating there. Let's go ahead and add some styling to it. We can do that by adding a new parameter into our text widget called Textile. All right. So I updated our text widget to have the text right here and then it's passing in an argument, a text style for the style argument and we're going to set the font size to 30. If I do Command S to save the file, not only is this going to reformat itself, the code is going to reformat itself, but we're also going to see the hot reload take place as well. So I'm going to do Command S and then it reloads and now we can see that McDonald's is much larger right here and we can see that the code also formatted itself as well. Now this is okay, but I think that it would look nicer. It feels bold. So let's go ahead and add some font weight to the text style as well. All right. So now we have font size and font weight. We Command S to save it and there it is. We have a bold McDonald's looking pretty good so far. Now what we want to do is we want to put some text above it saying what should we eat. So in order to do that, what we're going to do is we're going to create a column. We're going to wrap this text widget in a column so that we can have things stacked vertically, right? A column goes up and down vertically. So let's go ahead and right click on our text widget. We're going to go to Refactor and we're going to wrap with column. As you can see, it's going to put it in a column and if we Command S to save it, we're going to notice that our widget actually disappears. Now McDonald's is still there, but it's up here behind the iPhone's notch. And the problem that we have right now is that our column is going all the way up and down and we can't see our McDonald's widget. So to fix that, what we need to do is we need to add in a argument to our column that is going to control our main access alignment. Main access means whichever direction it primarily goes in and a column goes up and down. So our main access up and down, we want it to be in the center. So let's go ahead and add that argument in. All right, so we pass in main access alignment. We Command S to save and now we can see McDonald's again. So now you might notice that column doesn't take in a child, but it takes in a children a list of different widgets. And now we could just simply add the text above it saying what do you want to eat? And here we go, text what do you want to eat? And then it's followed by a comma because this is a list of widgets. So we Command S to save it and there we go. What do you want to eat? Looking good so far, but I don't only want to show just McDonald's, right? It's not always going to be McDonald's. So what we can do is we can create a list of different restaurants that we want to go to. So up here at the top of my app state, I'm going to create a new list of strings and I'm going to enter in a couple of different restaurants that I like. And there we go. So we have a list of strings, which is going to be our restaurants. And then we have a couple of restaurants in here. So we have McDonald's, Roscoes, Chicken and Waffles, Olive Garden, Pizza Hut and Panda Express. So now what we can do is instead of writing in McDonald's right here, which this is hard coding, what we want to do is we want to simply pass in restaurants and then whatever index we want to show. So in order to show Roscoes, Chicken and Waffles, what we're going to do is we're going to pass in restaurants and then we're going to pass in the index of one because in Dart, Arrays or Lists are zero index, which means that this is the zero position. This is one. This is two, three and four. So we have a list of five elements, but it goes zero, one, two, three, four like that. So let's go ahead and display Roscoes, Chicken and Waffles right here in our text widget. And we can just do that by passing in restaurants and then the index that we're interested in displaying, which is the first in the one index. We'll save it. And we can see that our text has now updated. Now this doesn't look right. You know, it's formatted all the way to the left. So now what we want to do is we want to add some text alignment. All right. So I passed in a new argument, text align, and it's going to be text align.center. We save it. And there we go. Everything's back to looking all right. Now we don't always want to just show once again a single index. This is still hard coding it. What we want to do is we want to be able to manipulate the index that we're showing. We want it to be a random number. So let's go ahead and create a new, a new property that's going to hold on to whatever index we want to display. All right. So now I have this this current index. And I just set it equal to one for right now. And I wanted to show that now I can actually replace this one with current index like that. And if I save it, we should notice that nothing happens. But if I were to update this now to like three and save it, we should notice that our Rosco's chicken and waffles is actually going to be updated. Oh, we actually have to do a hot restart so that we can get everything updated. And now it's going to show pizza hut. So as you can see, whenever we update this current index, it's going to be showing something different. But as you saw, if I were to change it to four and if I were to save, it's not going to actually trigger it to change. And that's because we didn't set the state or we didn't notify Flutter that there were updates that changed the state. So we just need to keep that in mind for when we write out a new function that's going to create a new index. Now before we do all that, let's go ahead and create a button that's going to allow us to press it and then choose a new index. So now we have this new flat button that's in our column, right? It's right below the text widget that shows our restaurant. And as you can see, the on press button is not doing anything right now. And then it has a child, which is going to be a text widget that's going to say pick restaurant. Let's go ahead and command S to save that. And now we can see that our button is right here, but it looks kind of plain. So let's go ahead and style it. All right. So we can pass in color and we can choose purple and that will be the background color. And then we can choose text color and we'll make that white and we press save. And now our button looks a little bit more appealing. Now this is okay, but let's add a little bit of spacing in between the button and what's actually being displayed. And we can do that by creating a new padding widget. So we created a new padding widget. It takes in an argument called padding and it takes in an edge in set. Now we only want to do it in one direction. It doesn't really matter whether it's top or bottom, but we just want to add some spacing. So I'm going to do some spacing towards the top. It doesn't really matter. It's just going to be padding in between our text widget and our button. And it's going to be of it's going to be 50 points. So if we save that, we can see that now our button is separated from the actual restaurant. So everything's looking pretty good. Now what we need to do is we need to implement our function for the flat button when it's pressed so that we can change the up so that we can update our current index. So down here at the bottom, what I'll do is I'll create a new function called update index. So we have our basic update index function, which is returning voids, which means that it's not really returning anything. And we want this to update our current index. So first what we need to do is create a random number. All right. So now we have a new instance of our random object, which does require the Dart math package. So make sure that's imported at the top. And then we are going to get our index. And we're going to say random. And then it's going to be the next integer all the way up to five. So it's going to start at zero. And it's going to go all the way up to, but not including this number that we pass in right here, which is five. And the reason why I put in five was because we have one, two, three, four, five. And like I said, it's going to start at zero, go up to, but not include five. So that means it's going to randomly select number from zero, one, two, three, or four. Now let's go ahead and update our index. But keep in mind that we need to use set state. So that flutter knows that we updated its index. All right. So it's as simple as that. So we're doing set state. We're setting the current index to this randomly created index right here. And now we just need to make sure that we call this function from our button. So we could just simply add it into our on press method. And there we go. So our flat button on press, it's going to update the index. And we should only be displaying whatever is selected. So let's go ahead and save our app. And we'll actually do a hot restart. All right. And there we go. So now it's showing Panda Express. But if I click it, it's going to jump and it's going to choose something randomly, Olive Garden, then Panda Express, then McDonald's, then Olive Garden, Roscoe's chicken and waffles. So as you can see, we were able to create things and update it randomly. Now what happens if I add in an additional place here? So now if I go ahead and add an additional restaurant in here and I do the hot restart, what do you think is going to happen? Well, it's going to start off at Panda Express first just because we have it set to four right now. So it's always going to start off at Panda Express until we change this. But let's see if we can ever get it to show subway, which we're actually not going to be able to. And the reason why we're not going to be able to get it to show subway is because it's only going up to five and not going past that right. So 012345 right. And it goes up to that number, but doesn't include it. So down here in our update index, what we need to do is instead of using a hard coded value, we'll go ahead and use the restaurants list. And then we can say dot length. And that's going to say, however many objects are inside of that list. So we have six objects in there, which means that it's going to pass in six right here, which means that it's going to start from zero and go all the way up to, but not include six. So now if we go ahead and do the hot restart and we pick a restaurant, we should be able to see subway pop up. So I got lucky. It was only one click, but yeah, now we were able to actually access subway. We're almost done. Let's go ahead and make sure that our app is not going to always start off by showing us pizza hut or olive garden or any of these right. We don't want it to start off showing us something. We want it to be empty. So what I'll do is I'll remove the initial value of our current index. And then over here in our widget, since we're planning on using restaurants current index, we need to make sure that we're checking to see if current index is actually null, which we just made it null right now. So whenever we do a hot reload, there is no value. And it's going to actually cause our app to crash because there's no value. There's no restaurants at null index. So we need to make sure that there is a value before we try to display something here. The easiest way to do that is to take advantage of one of Dart's awesome features, which is adding control flow or if statements inside of lists. So we can actually add an if statement right here and check if restaurant current index is null. All right. So as simple as that, we're simply going to say if current index is not equal to null, if it does have a value, then we're able to display this text widget, which is going to pull from the restaurants at the current index. But if it is null, then it's just going to simply skip over this widget and it's going to go on to display the next widget, which is going to be this padding widget right here. So let's go ahead and hot restart our app. And we should notice that it's going to start off empty. What do you want to eat? And there's nothing displayed there until we actually hit the pick restaurant button. In which case, it's going to give us a random restaurant to eat from. So pretty cool. And that's going to be it for today. I hope that you enjoyed the video. If you learned something new and you want to and you want to watch more videos like this, make sure that you subscribe. If you have any suggestions of simple apps that you want to build during this 30 days of code, make sure you leave them in the comments down below. And now go out there and keep coding passionately.